#!/usr/bin/env python

import sys, os
import time, threading
import pygame
from config import *
from filepicker import *
from retrorewind import *
from insanekartwii import *

CONFIG_FILE_PATH = "./config.json"
ZIP_FOLDER       = "/tmp/update/"
WINDOW_SURFACE   = pygame.HWSURFACE|pygame.DOUBLEBUF
MENU_MIN_NUM     = 0
MENU_MAX_NUM     = 2

def pressButton(cfg, rr, ikw):
    cfg['loading'] = True
    if cfg['menu_select'] == 1:
        if rr.needUpdate():
            cfg['action_thread'] = threading.Thread(target=rr.update)
        else:
            cfg['action_thread'] = threading.Thread(target=rr.install)
        cfg['action_thread'].start()
    elif cfg['menu_select'] == 0:
        cfg['loading'] = True
    elif cfg['menu_select'] == 2:
        cfg['action_thread'] = threading.Thread(target=ikw.install)
        cfg['action_thread'].start()
    else:
        cfg['loading'] = False

def eventHandler(joystick, cfg, rr, ikw):
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit(0)
    if cfg['loading'] == True:
        return
    # Controller input
    hat = joystick.get_hat(0)
    if hat[1] == 1:  # Up
        if cfg['menu_select'] > MENU_MIN_NUM:
            cfg['menu_select'] -= 1
    elif hat[1] == -1:  # Down
        if cfg['menu_select'] < MENU_MAX_NUM:
            cfg['menu_select'] += 1
    pygame.event.pump()
    if joystick.get_button(7) and joystick.get_button(6):
        # press start and select to quit
        os.system(f"rm -rf {ZIP_FOLDER}")
        pygame.quit()
        sys.exit()
    elif joystick.get_button(0):  # A
        print("press A")
        pressButton(cfg, rr, ikw)
    #time.sleep(0.5)

def draw(screen, infoObject, rr, ikw, cfg):
    # This function is a fuckup
    fontTitle = pygame.font.SysFont(None, 48)
    fontText = pygame.font.SysFont(None, 38)
    background = pygame.image.load("resources/menu-background.png")
    if not hasattr(draw, "frameindex"):
        draw.frameindex= 0  # Static-like: initialized once
    if not hasattr(draw, "frames"):
        draw.frames = []
        for filename in sorted(os.listdir("./resources/loading_bar/")):
            if filename.endswith(".png"):
                frame = pygame.image.load(os.path.join("./resources/loading_bar/", filename)).convert_alpha()
                draw.frames.append(frame)

    screen.fill((255, 255, 255))
    screen.blit(background, (0, 0))
    title = fontTitle.render("Mario Kart Wii Mods Updater", True, (255, 255, 255))
    screen.blit(title, (infoObject.current_w//2 - title.get_width()//2, 100))
    text = fontTitle.render("Dolphin path:", True, (255, 255, 255))
    screen.blit(text, (100, 300))
    if cfg['menu_select'] == 0:
        text = fontTitle.render(">", True, (255, 255, 255))
        screen.blit(text, (100, 350))
    text = fontText.render(cfg['dolphin_path'] + " - Select to change", True, (255, 255, 255))
    screen.blit(text, (150, 350))
    text = fontTitle.render("Retro Rewind", True, (255, 255, 255))
    screen.blit(text, (100, 400))
    if cfg['menu_select'] == 1:
        text = fontTitle.render(">", True, (255, 255, 255))
        screen.blit(text, (100, 450))
    if rr.exists():
        if rr.needUpdate():
            text = fontText.render("Update Installation", True, (255, 255, 255))
        else:
            text = fontText.render("Retro Rewind is up to date! - Select to delete and re-install", True, (255, 255, 255))
    else:
        text = fontText.render("Install RetroRewind", True, (255, 255, 255))
    screen.blit(text, (150, 450))
    text = fontTitle.render("Insane Kart Wii", True, (255, 255, 255))
    screen.blit(text, (100, 500))
    if cfg['menu_select'] == 2:
        text = fontTitle.render(">", True, (255, 255, 255))
        screen.blit(text, (100, 550))
    if ikw.exists():
        text = fontText.render("Insane Kart Wii is installed - Select to delete and reinstall", True, (255, 255, 255))
    else:
        text = fontText.render("Install Insane Kart Wii", True, (255, 255, 255))
    screen.blit(text, (150, 550))
    if cfg['loading'] == True:
        screen.blit(draw.frames[draw.frameindex], ((infoObject.current_w / 2) - (draw.frames[draw.frameindex].get_width() / 2), infoObject.current_h - draw.frames[draw.frameindex].get_height()))
        draw.frameindex = (draw.frameindex + 1) % len(draw.frames)

def loadingScreen(screen, infoObject):
    frame_folder = "./resources/loading_screen/"
    frames = []
    for filename in sorted(os.listdir(frame_folder)):
        if filename.endswith(".png"):
            frame = pygame.image.load(os.path.join(frame_folder, filename)).convert_alpha()
            frames.append(frame)
    loading = True
    clock = pygame.time.Clock()
    frame_index = 0
    frame_rate = 60  # frames per second
    start_time = pygame.time.get_ticks()  # Time in milliseconds

    while loading:
        screen.fill((0, 0, 0))
        screen.blit(frames[frame_index], ((infoObject.current_w / 2) - (frames[frame_index].get_width() / 2), (infoObject.current_h / 2) - (frames[frame_index].get_height() / 2)))
        pygame.display.flip()
        frame_index = (frame_index + 1) % len(frames)
        clock.tick(frame_rate)
        current_time = pygame.time.get_ticks()
        elapsed_time = (current_time - start_time) / 1000  # Convert to seconds
        if elapsed_time >= 4:
            loading= False  # Exit after 2 seconds

def main():
    infoObject = pygame.display.Info()
    screen = pygame.display.set_mode((infoObject.current_w, infoObject.current_h), WINDOW_SURFACE)
    clock = pygame.time.Clock()
    pygame.display.set_caption("ModManager")
    pygame.joystick.init()
    config = load_config(CONFIG_FILE_PATH)
    rr_handler = RetroRewind(config)
    ikw_handler = InsaneKartWii(config)

    if pygame.joystick.get_count() < 1:
        print("No controller connected.")
        pygame.quit()
        sys.exit()
    joystick = pygame.joystick.Joystick(0)
    fp = FilePicker(screen,joystick)
    loadingScreen(screen, infoObject)
    while True:
        eventHandler(joystick, config, rr_handler, ikw_handler)
        draw(screen, infoObject, rr_handler, ikw_handler, config)
        if config['loading'] == True and config['menu_select'] == 0:
            fp.draw()
            text = fp.event()
            if len(text) > 0:
                config['loading'] = False
                print(text)
                config['dolphin_path'] = text
                save_config(CONFIG_FILE_PATH, config)
        pygame.display.flip()
        if config['loading'] == True and config['menu_select'] == 1 and not config['action_thread'].is_alive():
            rr.update_version()
            config['loading'] = False
            config['action_thread'] = None
        clock.tick(30)


if __name__ == "__main__":
    pygame.init()
    main()
